#!/usr/bin/env python3
"""
generate_index.py

Walks the repository and produces a Markdown file at docs/PROJECT_INDEX.md
listing languages, file counts, and a table of code files with detected language.

Usage:
    python scripts/generate_index.py

This script uses only the standard library and is safe to run locally.
"""
from __future__ import annotations
import os
from collections import defaultdict
from pathlib import Path
import sys


EXT_TO_LANG = {
    '.py': 'Python',
    '.js': 'JavaScript',
    '.ts': 'TypeScript',
    '.java': 'Java',
    '.c': 'C',
    '.cpp': 'C++',
    '.cc': 'C++',
    '.cxx': 'C++',
    '.cs': 'C#',
    '.dart': 'Dart',
    '.kt': 'Kotlin',
    '.kts': 'Kotlin',
    '.php': 'PHP',
    '.rb': 'Ruby',
    '.rs': 'Rust',
    '.go': 'Go',
    '.swift': 'Swift',
    '.scala': 'Scala',
    '.pl': 'Perl',
    '.f90': 'Fortran',
    '.f': 'Fortran',
    '.m': 'Objective-C',
    '.R': 'R',
    '.r': 'R',
    '.jl': 'Julia',
    '.sh': 'Shell',
    '.bash': 'Shell',
    '.ps1': 'PowerShell',
    '.txt': 'Text',
    '.md': 'Markdown',
}


def detect_language(path: Path) -> str:
    ext = path.suffix
    if ext in EXT_TO_LANG:
        return EXT_TO_LANG[ext]
    # handle double suffix like .c++ or .c++ is not common; fallback to folder hints
    parent = path.parent.name.lower()
    if parent in ('c', 'c++', 'cpp'):
        return 'C/C++'
    return ext.lstrip('.') or 'unknown'


def gather_files(root: Path) -> list[tuple[Path, str]]:
    files = []
    for dirpath, dirnames, filenames in os.walk(root):
        # skip .git and hidden build dirs
        parts = Path(dirpath).parts
        if '.git' in parts or '.github' in parts or '__pycache__' in parts:
            continue
        for fn in filenames:
            p = Path(dirpath) / fn
            # skip binary files and large files by extension
            if p.suffix.lower() in ('.png', '.jpg', '.jpeg', '.gif', '.ico', '.exe', '.dll'):
                continue
            files.append((p.relative_to(root), detect_language(p)))
    return sorted(files, key=lambda x: str(x[0]))


def build_index(root: Path, out_path: Path) -> None:
    files = gather_files(root)
    lang_count = defaultdict(int)
    for _, lang in files:
        lang_count[lang] += 1

    # prepare docs dir
    out_path.parent.mkdir(parents=True, exist_ok=True)

    with out_path.open('w', encoding='utf-8') as f:
        f.write('# Project Index\n\n')
        f.write('This file is auto-generated by `scripts/generate_index.py`. It lists code files in the repository and groups them by detected language.\n\n')

        f.write('## Summary\n\n')
        total_files = len(files)
        f.write(f'- Total files scanned: **{total_files}**\n')
        f.write('\n')

        f.write('### Files by language\n\n')
        f.write('| Language | File count |\n')
        f.write('|---:|---:|\n')
        for lang, count in sorted(lang_count.items(), key=lambda x: (-x[1], x[0])):
            f.write(f'| {lang} | {count} |\n')
        f.write('\n')

        f.write('## Files\n\n')
        f.write('| Path | Detected language |\n')
        f.write('|---|---|\n')
        for path, lang in files:
            f.write(f'| `{path.as_posix()}` | {lang} |\n')

    print(f'Wrote project index to: {out_path}')


def main() -> int:
    repo_root = Path(__file__).resolve().parents[1]
    out = repo_root / 'docs' / 'PROJECT_INDEX.md'
    build_index(repo_root, out)
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
